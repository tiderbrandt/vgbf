import { sql } from '@/lib/database';
import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    console.log('Starting pages table migration...');
    
    // Create the pages table
    await sql`
      CREATE TABLE IF NOT EXISTS pages (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          title VARCHAR(500) NOT NULL,
          slug VARCHAR(255) UNIQUE NOT NULL,
          content TEXT NOT NULL,
          excerpt TEXT,
          author VARCHAR(255),
          status VARCHAR(20) DEFAULT 'draft' CHECK (status IN ('draft', 'published', 'private')),
          featured_image VARCHAR(255),
          featured_image_alt VARCHAR(255),
          meta_title VARCHAR(500),
          meta_description TEXT,
          meta_keywords TEXT,
          template VARCHAR(50) DEFAULT 'default',
          show_in_navigation BOOLEAN DEFAULT false,
          navigation_order INTEGER DEFAULT 0,
          parent_page_id UUID REFERENCES pages(id),
          view_count INTEGER DEFAULT 0,
          featured BOOLEAN DEFAULT false,
          published_at TIMESTAMP WITH TIME ZONE,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      )
    `;
    
    console.log('‚úì Created pages table');
    
    // Create indexes
    await sql`CREATE INDEX IF NOT EXISTS idx_pages_slug ON pages(slug)`;
    await sql`CREATE INDEX IF NOT EXISTS idx_pages_status ON pages(status)`;
    await sql`CREATE INDEX IF NOT EXISTS idx_pages_featured ON pages(featured)`;
    await sql`CREATE INDEX IF NOT EXISTS idx_pages_navigation ON pages(show_in_navigation, navigation_order)`;
    await sql`CREATE INDEX IF NOT EXISTS idx_pages_published_at ON pages(published_at)`;
    
    console.log('‚úì Created indexes');
    
    // Create trigger function
    await sql`
      CREATE OR REPLACE FUNCTION update_pages_updated_at()
      RETURNS TRIGGER AS $$
      BEGIN
          NEW.updated_at = CURRENT_TIMESTAMP;
          RETURN NEW;
      END;
      $$ language 'plpgsql'
    `;
    
    // Create trigger (drop first if exists)
    await sql`DROP TRIGGER IF EXISTS update_pages_updated_at ON pages`;
    await sql`
      CREATE TRIGGER update_pages_updated_at
          BEFORE UPDATE ON pages
          FOR EACH ROW
          EXECUTE FUNCTION update_pages_updated_at()
    `;
    
    console.log('‚úì Created update trigger');
    
    // Insert example pages
    const insertResult = await sql`
      INSERT INTO pages (title, slug, content, excerpt, status, show_in_navigation, navigation_order, published_at) VALUES
      ('Om VGBF', 'om-vgbf', 
      '<h2>V√§lkommen till V√§stra G√∂talands B√•gskyttef√∂rbund</h2>
      <p>V√§stra G√∂talands B√•gskyttef√∂rbund (VGBF) √§r det regionala f√∂rbundet f√∂r b√•gskytte i V√§stra G√∂taland. Vi arbetar f√∂r att fr√§mja och utveckla b√•gskyttesporten i regionen.</p>
      
      <h3>V√•r verksamhet</h3>
      <p>VGBF organiserar t√§vlingar, kurser och andra aktiviteter f√∂r b√•gskyttar i alla √•ldrar och p√• alla niv√•er. Vi samarbetar n√§ra med v√•ra medlemsklubbar f√∂r att erbjuda den b√§sta m√∂jliga b√•gskytteupplevelsen.</p>
      
      <h3>V√•ra v√§rderingar</h3>
      <ul>
      <li>S√§kerhet f√∂rst - vi prioriterar alltid s√§ker b√•gskytteut√∂vning</li>
      <li>Inkludering - b√•gskytte f√∂r alla oavsett √•lder, k√∂n eller funktionsf√∂rm√•ga</li>
      <li>Utveckling - vi st√∂ttar v√•ra medlemmar att utvecklas inom sporten</li>
      <li>Gemenskap - b√•gskytte bygger v√§nskap och samh√∂righet</li>
      </ul>',
      'L√§r dig mer om V√§stra G√∂talands B√•gskyttef√∂rbund, v√•ra v√§rderingar och verksamhet.',
      'published', true, 1, CURRENT_TIMESTAMP),
      
      ('S√§kerhet och regler', 'sakerhet-och-regler',
      '<h2>S√§kerhet vid b√•gskytte</h2>
      <p>S√§kerhet √§r v√•r h√∂gsta prioritet inom b√•gskyttesporten. H√§r hittar du viktiga s√§kerhetsregler och riktlinjer.</p>
      
      <h3>Grundl√§ggande s√§kerhetsregler</h3>
      <ol>
      <li>Peka aldrig en pilb√•ge mot n√•gon person</li>
      <li>Skjut endast mot godk√§nda m√•l</li>
      <li>Kontrollera att skjutbanan √§r fri innan du skjuter</li>
      <li>Anv√§nd alltid l√§mplig skyddsutrustning</li>
      <li>F√∂lj alla instruktioner fr√•n kursansvariga och funktion√§rer</li>
      </ol>
      
      <h3>Utrustningskrav</h3>
      <p>All utrustning ska vara i gott skick och kontrolleras regelbundet. Defekt utrustning f√•r inte anv√§ndas.</p>',
      'Viktiga s√§kerhetsregler och riktlinjer f√∂r b√•gskytte.',
      'published', true, 2, CURRENT_TIMESTAMP)
      ON CONFLICT (slug) DO NOTHING
    `;
    
    console.log('‚úì Inserted example pages');
    
    // Test the table
    const result = await sql`SELECT COUNT(*) as count FROM pages`;
    console.log(`üìä Pages table contains ${result[0].count} records`);
    
    return NextResponse.json({
      success: true,
      message: 'Pages table migration completed successfully!',
      pageCount: result[0].count
    });
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error occurred'
    }, { status: 500 });
  }
}