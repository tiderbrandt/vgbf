/**
 * Simple migration script to add pages table
 */

const { neon } = require('@neondatabase/serverless');

const connectionString = process.env.DATABASE_URL;

if (!connectionString) {
  console.error('DATABASE_URL environment variable is required');
  process.exit(1);
}

const sql = neon(connectionString);

async function runMigration() {
  try {
    console.log('Starting pages table migration...');
    
    // Create the pages table
    await sql`
      CREATE TABLE IF NOT EXISTS pages (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          title VARCHAR(500) NOT NULL,
          slug VARCHAR(255) UNIQUE NOT NULL,
          content TEXT NOT NULL,
          excerpt TEXT,
          author VARCHAR(255),
          status VARCHAR(20) DEFAULT 'draft' CHECK (status IN ('draft', 'published', 'private')),
          featured_image VARCHAR(255),
          featured_image_alt VARCHAR(255),
          meta_title VARCHAR(500),
          meta_description TEXT,
          meta_keywords TEXT,
          template VARCHAR(50) DEFAULT 'default',
          show_in_navigation BOOLEAN DEFAULT false,
          navigation_order INTEGER DEFAULT 0,
          parent_page_id UUID REFERENCES pages(id),
          view_count INTEGER DEFAULT 0,
          featured BOOLEAN DEFAULT false,
          published_at TIMESTAMP WITH TIME ZONE,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      )
    `;
    
    console.log('‚úì Created pages table');
    
    // Create indexes
    await sql`CREATE INDEX IF NOT EXISTS idx_pages_slug ON pages(slug)`;
    await sql`CREATE INDEX IF NOT EXISTS idx_pages_status ON pages(status)`;
    await sql`CREATE INDEX IF NOT EXISTS idx_pages_featured ON pages(featured)`;
    await sql`CREATE INDEX IF NOT EXISTS idx_pages_navigation ON pages(show_in_navigation, navigation_order)`;
    await sql`CREATE INDEX IF NOT EXISTS idx_pages_published_at ON pages(published_at)`;
    
    console.log('‚úì Created indexes');
    
    // Create trigger function
    await sql`
      CREATE OR REPLACE FUNCTION update_pages_updated_at()
      RETURNS TRIGGER AS $$
      BEGIN
          NEW.updated_at = CURRENT_TIMESTAMP;
          RETURN NEW;
      END;
      $$ language 'plpgsql'
    `;
    
    // Create trigger
    await sql`
      CREATE TRIGGER update_pages_updated_at
          BEFORE UPDATE ON pages
          FOR EACH ROW
          EXECUTE FUNCTION update_pages_updated_at()
    `;
    
    console.log('‚úì Created update trigger');
    
    // Insert example pages
    await sql`
      INSERT INTO pages (title, slug, content, excerpt, status, show_in_navigation, navigation_order, published_at) VALUES
      ('Om VGBF', 'om-vgbf', 
      '<h2>V√§lkommen till V√§stra G√∂talands B√•gskyttef√∂rbund</h2>
      <p>V√§stra G√∂talands B√•gskyttef√∂rbund (VGBF) √§r det regionala f√∂rbundet f√∂r b√•gskytte i V√§stra G√∂taland. Vi arbetar f√∂r att fr√§mja och utveckla b√•gskyttesporten i regionen.</p>
      
      <h3>V√•r verksamhet</h3>
      <p>VGBF organiserar t√§vlingar, kurser och andra aktiviteter f√∂r b√•gskyttar i alla √•ldrar och p√• alla niv√•er. Vi samarbetar n√§ra med v√•ra medlemsklubbar f√∂r att erbjuda den b√§sta m√∂jliga b√•gskytteupplevelsen.</p>',
      'L√§r dig mer om V√§stra G√∂talands B√•gskyttef√∂rbund, v√•ra v√§rderingar och verksamhet.',
      'published', true, 1, CURRENT_TIMESTAMP)
      ON CONFLICT (slug) DO NOTHING
    `;
    
    console.log('‚úì Inserted example pages');
    
    // Test the table
    const result = await sql`SELECT COUNT(*) as count FROM pages`;
    console.log(`üìä Pages table contains ${result[0].count} records`);
    
    console.log('‚úÖ Pages table migration completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    process.exit(1);
  }
}

runMigration();